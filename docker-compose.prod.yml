# BoardGuru Production Docker Compose
version: '3.8'

services:
  # Production application with replicas
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        NODE_ENV: production
        BUILD_TIME: ${BUILD_TIME}
        GIT_SHA: ${GIT_SHA}
    image: boardguru:${VERSION:-latest}
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        order: stop-first
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - boardguru-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - boardguru-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # NGINX Load Balancer with SSL
  nginx:
    image: nginx:alpine
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - boardguru-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - ./docker/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - boardguru-prod-network
    ports:
      - "9090:9090"

  # Production Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - boardguru-prod-network
    ports:
      - "3001:3000"

  # Log Aggregation - Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - ./docker/fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - fluentd_logs:/var/log/fluentd
    ports:
      - "24224:24224"
    networks:
      - boardguru-prod-network
    environment:
      - FLUENTD_CONF=fluent.conf

  # Security Scanning - Trivy
  trivy:
    image: aquasec/trivy:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - trivy_cache:/root/.cache/trivy
    networks:
      - boardguru-prod-network
    command: ["server", "--listen", "0.0.0.0:4954"]
    ports:
      - "4954:4954"

  # Backup Service
  backup:
    image: postgres:15-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - backup_data:/backups
      - ./docker/backup/backup-script.sh:/backup-script.sh
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - boardguru-prod-network
    command: ["sh", "/backup-script.sh"]

  # Health Check Service
  healthcheck:
    image: curlimages/curl:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    command: >
      sh -c "
        while true; do
          curl -f http://nginx/api/health || exit 1
          sleep 30
        done
      "
    networks:
      - boardguru-prod-network

volumes:
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  nginx_logs:
    driver: local
  fluentd_logs:
    driver: local
  trivy_cache:
    driver: local
  backup_data:
    driver: local

networks:
  boardguru-prod-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Production secrets (use external secrets in real deployment)
secrets:
  database_url:
    external: true
  redis_url:
    external: true
  nextauth_secret:
    external: true
  smtp_credentials:
    external: true
  api_keys:
    external: true