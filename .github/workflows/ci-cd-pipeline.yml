name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BUILD_CACHE_KEY: build-cache-${{ github.sha }}

jobs:
  # Security and dependency scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          npx audit-ci --moderate

      - name: Run SAST with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run dependency vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Code quality and linting
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Check code formatting with Prettier
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx}"

      - name: Run SonarQube scan
        uses: sonarqube-quality-gate-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Unit and integration tests
  test-unit:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        test-group: [unit, integration, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          docker run -d \
            --name postgres-test \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_USER=test \
            -e POSTGRES_DB=boardguru_test \
            -p 5432:5432 \
            postgres:15-alpine

      - name: Wait for database
        run: |
          until docker exec postgres-test pg_isready -U test; do
            sleep 1
          done

      - name: Run database migrations
        run: |
          export DATABASE_URL="postgresql://test:test@localhost:5432/boardguru_test"
          npm run db:migrate
        env:
          NODE_ENV: test

      - name: Run tests with coverage
        run: |
          case "${{ matrix.test-group }}" in
            unit)
              npm run test:coverage -- --testPathPattern="__tests__/unit/"
              ;;
            integration)
              npm run test:coverage -- --testPathPattern="__tests__/integration/"
              ;;
            api)
              npm run test:api
              ;;
          esac
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://test:test@localhost:5432/boardguru_test"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-group }}
          name: codecov-${{ matrix.test-group }}
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Store test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-group }}
          path: |
            coverage/
            test-results/
          retention-days: 30

  # End-to-end tests
  test-e2e:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test environment
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: |
          npx playwright test \
            --project=${{ matrix.browser }} \
            --shard=${{ matrix.shard }}/4 \
            --reporter=html,junit,json
        env:
          NODE_ENV: test
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-shard-${{ matrix.shard }}
          path: |
            playwright-report-${{ matrix.browser }}-${{ matrix.shard }}/
            test-results/
          retention-days: 30

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse-ci.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run load tests with K6
        uses: grafana/k6-action@v0.3.1
        with:
          filename: performance-tests/k6/load-test.js
        env:
          BASE_URL: http://localhost:3000

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            lighthouse-results/
            performance-results/
          retention-days: 30

  # Build application
  build:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_TIME=${{ github.run_number }}
            GIT_SHA=${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Database migrations
  database-migrate:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: ${{ inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify migration status
        run: npm run db:status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, test-unit, test-e2e]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.boardguru.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EKS Staging
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name staging-cluster
          
          # Update image in deployment
          kubectl set image deployment/boardguru-app \
            boardguru-app=${{ needs.build.outputs.image-tag }} \
            -n staging

          # Wait for rollout
          kubectl rollout status deployment/boardguru-app -n staging --timeout=600s

      - name: Run smoke tests
        run: |
          sleep 60  # Allow deployment to stabilize
          npm run test:smoke
        env:
          BASE_URL: https://staging.boardguru.ai

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, test-unit, test-e2e, database-migrate]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' && 
      (inputs.environment == 'production' || github.event_name == 'workflow_dispatch')
    environment:
      name: production
      url: https://boardguru.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create deployment record
        run: |
          echo "Creating deployment record for version ${{ github.sha }}"
          kubectl create configmap deployment-${{ github.run_number }} \
            --from-literal=version=${{ github.sha }} \
            --from-literal=timestamp=$(date -Iseconds) \
            --from-literal=deployer=${{ github.actor }} \
            -n production

      - name: Blue-Green Deployment
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name production-cluster
          
          # Deploy to green environment
          kubectl patch deployment boardguru-app-green \
            -p '{"spec":{"template":{"spec":{"containers":[{"name":"boardguru-app","image":"${{ needs.build.outputs.image-tag }}"}]}}}}' \
            -n production

          # Wait for green deployment
          kubectl rollout status deployment/boardguru-app-green -n production --timeout=600s

          # Health check on green
          kubectl run health-check-${{ github.run_number }} \
            --image=curlimages/curl \
            --rm -i --restart=Never \
            -- curl -f http://boardguru-app-green-service:3000/api/health

          # Switch traffic to green (blue-green switch)
          kubectl patch service boardguru-app-service \
            -p '{"spec":{"selector":{"version":"green"}}}' \
            -n production

          # Scale down blue deployment after successful switch
          kubectl scale deployment boardguru-app-blue --replicas=0 -n production

      - name: Run post-deployment tests
        run: |
          sleep 120  # Allow deployment to stabilize
          npm run test:smoke
        env:
          BASE_URL: https://boardguru.ai

      - name: Update status page
        uses: skalavala/status-page@v1
        with:
          url: ${{ secrets.STATUS_PAGE_URL }}
          token: ${{ secrets.STATUS_PAGE_TOKEN }}
          message: "BoardGuru v${{ github.run_number }} deployed successfully"

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Built from commit: ${{ github.sha }}
            - Deployed at: $(date -Iseconds)
            - Performance score: Check artifacts
            - Security scan: Passed
          draft: false
          prerelease: false

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Rollback deployment
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name production-cluster
          
          # Switch traffic back to blue (previous version)
          kubectl patch service boardguru-app-service \
            -p '{"spec":{"selector":{"version":"blue"}}}' \
            -n production

          # Scale up blue deployment
          kubectl scale deployment boardguru-app-blue --replicas=3 -n production

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "warning",
                "title": "🔄 Production Rollback Executed",
                "text": "Deployment rolled back due to failure in run ${{ github.run_number }}",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Run ID",
                  "value": "${{ github.run_number }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup and reporting
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, rollback]
    if: always()
    steps:
      - name: Clean up artifacts
        run: |
          echo "Cleaning up build artifacts older than 30 days"
          # Cleanup logic here

      - name: Generate deployment report
        run: |
          echo "## Deployment Report for Run #${{ github.run_number }}" > deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Author**: ${{ github.actor }}" >> deployment-report.md
          echo "- **Status**: ${{ job.status }}" >> deployment-report.md
          echo "- **Time**: $(date -Iseconds)" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 90