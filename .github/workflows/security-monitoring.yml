name: Security Monitoring & Compliance

on:
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package*.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - comprehensive
        - dependency-check
        - sast
        - dast
        - secrets-scan

env:
  NODE_VERSION: '18.x'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'dependency-check' || 
      github.event.inputs.scan_type == 'comprehensive' || 
      github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --json > npm-audit-results.json || true
          npm audit --audit-level=moderate

      - name: Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json --file=package.json > snyk-results.json || true

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: 'BoardGuru'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --out dependency-check-report

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            npm-audit-results.json
            snyk-results.json
            dependency-check-report/
          retention-days: 30

      - name: Create security issue if vulnerabilities found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Results
            
            High or critical vulnerabilities have been detected in dependencies.
            
            **Scan Date:** ${new Date().toISOString()}
            **Workflow Run:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            
            Please review the scan results in the workflow artifacts and update dependencies accordingly.
            
            ### Actions Required:
            - [ ] Review vulnerability details
            - [ ] Update affected dependencies
            - [ ] Test application functionality
            - [ ] Deploy security updates
            
            **Artifacts:** [View Results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'vulnerability', 'high-priority']
            });

  # Static Application Security Testing (SAST)
  sast-scan:
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'sast' || 
      github.event.inputs.scan_type == 'comprehensive' || 
      github.event_name == 'schedule'
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Semgrep SAST Scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/typescript
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: ESLint Security Scan
        run: |
          npx eslint src/ --ext .ts,.tsx,.js,.jsx \
            --config .eslintrc.security.js \
            --format json \
            --output-file eslint-security-results.json || true

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        with:
          name: sast-scan-results
          path: |
            eslint-security-results.json
            semgrep.sarif
          retention-days: 30

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'secrets-scan' || 
      github.event.inputs.scan_type == 'comprehensive' || 
      github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json --output=trufflehog-results.json

      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

      - name: Yelp detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --json --output secrets-baseline.json || true
          detect-secrets audit secrets-baseline.json || true

      - name: Upload secrets scan results
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-results
          path: |
            trufflehog-results.json
            secrets-baseline.json
            gitleaks-report.json
          retention-days: 30

      - name: Alert on secrets found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üîê Potential Secrets Detected in Code`;
            const body = `
            ## Secrets Scan Alert
            
            Potential secrets or sensitive information have been detected in the codebase.
            
            **Scan Date:** ${new Date().toISOString()}
            **Workflow Run:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            
            **Immediate Actions Required:**
            - [ ] Review detected secrets in scan results
            - [ ] Rotate any exposed credentials immediately
            - [ ] Remove secrets from code and git history if necessary
            - [ ] Update secrets management practices
            
            **Scan Results:** [View Details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'secrets', 'critical']
            });

  # Dynamic Application Security Testing (DAST)
  dast-scan:
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'dast' || 
      github.event.inputs.scan_type == 'comprehensive'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30
        env:
          NODE_ENV: test
          PORT: 3000

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 60'

      - name: Nuclei Security Scan
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'http://localhost:3000'
          templates: 'exposures,misconfiguration,oast,technologies,vulnerabilities'
          output: 'nuclei-results.json'
          json: true

      - name: Upload DAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-scan-results
          path: |
            reports/
            nuclei-results.json
          retention-days: 30

  # Compliance checks
  compliance-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.scan_type == 'comprehensive'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: SOC2 Compliance Check
        run: |
          # Check for required security controls
          echo "Checking SOC2 compliance requirements..."
          
          # Check for encryption in transit
          grep -r "https" src/ > compliance-https.txt || echo "No HTTPS enforcement found"
          
          # Check for input validation
          grep -r "validator\|zod\|joi" src/ > compliance-validation.txt || echo "No input validation found"
          
          # Check for audit logging
          grep -r "audit\|log" src/ > compliance-logging.txt || echo "No audit logging found"
          
          # Check for access controls
          grep -r "auth\|permission\|role" src/ > compliance-access.txt || echo "No access controls found"

      - name: GDPR Compliance Check
        run: |
          echo "Checking GDPR compliance requirements..."
          
          # Check for data privacy controls
          grep -r "privacy\|consent\|gdpr" src/ > compliance-gdpr.txt || echo "No GDPR controls found"
          
          # Check for data retention policies
          grep -r "retention\|delete\|anonymize" src/ > compliance-retention.txt || echo "No retention policies found"

      - name: Security Headers Check
        run: |
          echo "Checking security headers implementation..."
          grep -r "helmet\|csp\|hsts" src/ > compliance-headers.txt || echo "No security headers found"

      - name: Generate compliance report
        run: |
          cat > compliance-report.md << EOF
          # Security Compliance Report
          
          **Generated:** $(date -Iseconds)
          **Commit:** ${{ github.sha }}
          
          ## SOC2 Controls
          - HTTPS Enforcement: $(wc -l < compliance-https.txt) instances
          - Input Validation: $(wc -l < compliance-validation.txt) instances
          - Audit Logging: $(wc -l < compliance-logging.txt) instances
          - Access Controls: $(wc -l < compliance-access.txt) instances
          
          ## GDPR Controls
          - Privacy Controls: $(wc -l < compliance-gdpr.txt) instances
          - Data Retention: $(wc -l < compliance-retention.txt) instances
          
          ## Security Headers
          - Security Headers: $(wc -l < compliance-headers.txt) instances
          
          EOF

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: |
            compliance-report.md
            compliance-*.txt
          retention-days: 90

  # Security dashboard update
  update-security-dashboard:
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secrets-scan, dast-scan, compliance-check]
    if: always()
    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results/

      - name: Generate security dashboard
        run: |
          python3 -c "
          import json
          import os
          from datetime import datetime
          
          dashboard = {
              'last_scan': datetime.now().isoformat(),
              'commit': '${{ github.sha }}',
              'run_id': '${{ github.run_number }}',
              'status': {
                  'dependency_scan': '${{ needs.dependency-scan.result }}',
                  'sast_scan': '${{ needs.sast-scan.result }}',
                  'secrets_scan': '${{ needs.secrets-scan.result }}',
                  'dast_scan': '${{ needs.dast-scan.result }}',
                  'compliance_check': '${{ needs.compliance-check.result }}'
              }
          }
          
          with open('security-dashboard.json', 'w') as f:
              json.dump(dashboard, f, indent=2)
          "

      - name: Upload security dashboard
        uses: actions/upload-artifact@v4
        with:
          name: security-dashboard
          path: security-dashboard.json
          retention-days: 365

      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "danger",
                "title": "üö® Security Scan Failures Detected",
                "text": "One or more security scans have failed. Immediate attention required.",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Run ID",
                  "value": "${{ github.run_number }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}