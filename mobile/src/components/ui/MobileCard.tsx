/**\n * Mobile Card Component\n * Enterprise-grade card component optimized for mobile governance workflows\n * Extends design patterns from main app with mobile-specific enhancements\n */\n\nimport React, { forwardRef } from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  Platform,\n  AccessibilityRole,\n} from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n  interpolate,\n} from 'react-native-reanimated';\nimport { Shadow } from 'react-native-shadow-2';\n\nimport type { MobileComponentProps } from '../../types/mobile';\nimport { useThemeStore } from '../../stores/themeStore';\nimport { hapticFeedback } from '../../utils/haptics';\n\ninterface MobileCardProps extends MobileComponentProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n  onPress?: () => void;\n  onLongPress?: () => void;\n  pressable?: boolean;\n  variant?: 'default' | 'elevated' | 'outlined' | 'filled';\n  padding?: 'none' | 'small' | 'medium' | 'large';\n  radius?: 'none' | 'small' | 'medium' | 'large';\n  shadow?: boolean;\n  hapticFeedback?: 'light' | 'medium' | 'heavy';\n  loading?: boolean;\n  error?: boolean;\n  success?: boolean;\n  priority?: 'low' | 'normal' | 'high' | 'critical';\n}\n\ninterface TouchableCardProps extends TouchableOpacityProps, MobileCardProps {\n  onPress: () => void;\n}\n\nconst MobileCard = forwardRef<View, MobileCardProps>((\n  {\n    children,\n    style,\n    onPress,\n    onLongPress,\n    pressable = true,\n    variant = 'default',\n    padding = 'medium',\n    radius = 'medium',\n    shadow = true,\n    hapticFeedback: hapticType = 'light',\n    loading = false,\n    error = false,\n    success = false,\n    priority = 'normal',\n    testID,\n    accessibilityLabel,\n    accessibilityHint,\n    accessibilityRole,\n    disabled = false,\n    ...props\n  },\n  ref\n) => {\n  const { theme } = useThemeStore();\n  const isDark = theme === 'dark';\n  \n  const pressAnimation = useSharedValue(0);\n  const scaleAnimation = useSharedValue(1);\n\n  // Handle press with haptic feedback\n  const handlePress = async () => {\n    if (disabled || !onPress) return;\n    \n    await hapticFeedback(hapticType);\n    onPress();\n  };\n\n  // Handle long press with haptic feedback\n  const handleLongPress = async () => {\n    if (disabled || !onLongPress) return;\n    \n    await hapticFeedback('medium');\n    onLongPress();\n  };\n\n  // Press animation styles\n  const animatedStyle = useAnimatedStyle(() => {\n    const scale = interpolate(\n      pressAnimation.value,\n      [0, 1],\n      [1, 0.98]\n    );\n    \n    return {\n      transform: [{ scale: withSpring(scale) }],\n    };\n  });\n\n  // Get card styles based on variant and theme\n  const cardStyles = StyleSheet.flatten([\n    styles.card,\n    styles[`padding_${padding}`],\n    styles[`radius_${radius}`],\n    {\n      backgroundColor: getBackgroundColor(),\n      borderColor: getBorderColor(),\n      borderWidth: variant === 'outlined' ? 1 : 0,\n    },\n    error && styles.errorCard,\n    success && styles.successCard,\n    getPriorityStyles(),\n    disabled && styles.disabledCard,\n    style,\n  ]);\n\n  // Get background color based on variant and theme\n  function getBackgroundColor(): string {\n    if (error) return isDark ? '#1F1B1B' : '#FEF2F2';\n    if (success) return isDark ? '#1B1F1B' : '#F0FDF4';\n    \n    switch (variant) {\n      case 'elevated':\n        return isDark ? '#374151' : '#FFFFFF';\n      case 'outlined':\n        return isDark ? '#1F2937' : '#FFFFFF';\n      case 'filled':\n        return isDark ? '#4B5563' : '#F9FAFB';\n      default:\n        return isDark ? '#1F2937' : '#FFFFFF';\n    }\n  }\n\n  // Get border color based on state\n  function getBorderColor(): string {\n    if (error) return isDark ? '#DC2626' : '#FECACA';\n    if (success) return isDark ? '#10B981' : '#BBF7D0';\n    \n    switch (priority) {\n      case 'critical':\n        return isDark ? '#DC2626' : '#FCA5A5';\n      case 'high':\n        return isDark ? '#F59E0B' : '#FCD34D';\n      default:\n        return isDark ? '#374151' : '#E5E7EB';\n    }\n  }\n\n  // Get priority-specific styles\n  function getPriorityStyles(): ViewStyle {\n    if (priority === 'critical') {\n      return {\n        borderLeftWidth: 4,\n        borderLeftColor: '#DC2626',\n      };\n    }\n    if (priority === 'high') {\n      return {\n        borderLeftWidth: 3,\n        borderLeftColor: '#F59E0B',\n      };\n    }\n    return {};\n  }\n\n  // Render card content\n  const cardContent = (\n    <Animated.View\n      ref={ref}\n      style={[cardStyles, animatedStyle]}\n      testID={testID}\n      accessibilityRole={accessibilityRole || (onPress ? 'button' : 'group')}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      accessibilityState={{\n        disabled,\n        busy: loading,\n      }}\n      {...props}\n    >\n      {children}\n    </Animated.View>\n  );\n\n  // Wrap with shadow if enabled\n  const shadowedContent = shadow && Platform.OS === 'ios' ? (\n    <Shadow\n      distance={variant === 'elevated' ? 8 : 4}\n      startColor={isDark ? '#00000040' : '#00000015'}\n      endColor={isDark ? '#00000010' : '#00000005'}\n      offset={[0, variant === 'elevated' ? 4 : 2]}\n      paintInside={false}\n      sides={{bottom: true, left: false, right: false, top: false}}\n      corners={{topStart: true, topEnd: true, bottomStart: true, bottomEnd: true}}\n      style={{ borderRadius: getRadiusValue() }}\n    >\n      {cardContent}\n    </Shadow>\n  ) : cardContent;\n\n  // Return touchable or non-touchable version\n  if (onPress && pressable && !disabled) {\n    return (\n      <TouchableOpacity\n        onPress={handlePress}\n        onLongPress={handleLongPress}\n        onPressIn={() => {\n          pressAnimation.value = withSpring(1);\n        }}\n        onPressOut={() => {\n          pressAnimation.value = withSpring(0);\n        }}\n        activeOpacity={0.98}\n        disabled={disabled}\n        accessibilityRole=\"button\"\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        testID={testID}\n      >\n        {shadowedContent}\n      </TouchableOpacity>\n    );\n  }\n\n  return shadowedContent;\n\n  // Helper function to get border radius value\n  function getRadiusValue(): number {\n    switch (radius) {\n      case 'none': return 0;\n      case 'small': return 8;\n      case 'medium': return 12;\n      case 'large': return 16;\n      default: return 12;\n    }\n  }\n});\n\nMobileCard.displayName = 'MobileCard';\n\nconst styles = StyleSheet.create({\n  card: {\n    borderRadius: 12,\n    backgroundColor: '#FFFFFF',\n    ...Platform.select({\n      ios: {\n        shadowColor: '#000000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 3,\n      },\n      android: {\n        elevation: 3,\n      },\n    }),\n  },\n  \n  // Padding variants\n  padding_none: {\n    padding: 0,\n  },\n  padding_small: {\n    padding: 12,\n  },\n  padding_medium: {\n    padding: 16,\n  },\n  padding_large: {\n    padding: 20,\n  },\n  \n  // Radius variants\n  radius_none: {\n    borderRadius: 0,\n  },\n  radius_small: {\n    borderRadius: 8,\n  },\n  radius_medium: {\n    borderRadius: 12,\n  },\n  radius_large: {\n    borderRadius: 16,\n  },\n  \n  // State variants\n  errorCard: {\n    borderWidth: 1,\n  },\n  successCard: {\n    borderWidth: 1,\n  },\n  disabledCard: {\n    opacity: 0.6,\n  },\n});\n\nexport { MobileCard };\nexport type { MobileCardProps };\n"}