/**\n * Mobile Button Component\n * Enterprise-grade button component with accessibility and haptic feedback\n * Optimized for touch interactions and mobile governance workflows\n */\n\nimport React, { forwardRef } from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  Text,\n  TextStyle,\n  ViewStyle,\n  StyleSheet,\n  ActivityIndicator,\n  Platform,\n  View,\n} from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n  withTiming,\n  interpolate,\n} from 'react-native-reanimated';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport type { MobileComponentProps } from '../../types/mobile';\nimport { useThemeStore } from '../../stores/themeStore';\nimport { hapticFeedback } from '../../utils/haptics';\n\n// Button variants using class-variance-authority pattern\nconst buttonVariants = cva('', {\n  variants: {\n    variant: {\n      primary: '',\n      secondary: '',\n      outline: '',\n      ghost: '',\n      destructive: '',\n      success: '',\n      warning: '',\n    },\n    size: {\n      small: '',\n      medium: '',\n      large: '',\n      xlarge: '',\n    },\n    fullWidth: {\n      true: '',\n      false: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'primary',\n    size: 'medium',\n    fullWidth: false,\n  },\n});\n\ninterface MobileButtonProps \n  extends Omit<TouchableOpacityProps, 'children'>, \n         MobileComponentProps,\n         VariantProps<typeof buttonVariants> {\n  title: string;\n  icon?: string;\n  iconPosition?: 'left' | 'right';\n  loading?: boolean;\n  hapticType?: 'light' | 'medium' | 'heavy';\n  requiresOnline?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n  iconSize?: number;\n  badge?: number;\n  badgeColor?: string;\n}\n\nconst MobileButton = forwardRef<TouchableOpacity, MobileButtonProps>((\n  {\n    title,\n    icon,\n    iconPosition = 'left',\n    loading = false,\n    hapticType = 'light',\n    requiresOnline = false,\n    variant = 'primary',\n    size = 'medium',\n    fullWidth = false,\n    disabled = false,\n    style,\n    textStyle,\n    iconSize,\n    badge,\n    badgeColor,\n    onPress,\n    onPressIn,\n    onPressOut,\n    testID,\n    accessibilityLabel,\n    accessibilityHint,\n    accessibilityRole = 'button',\n    ...props\n  },\n  ref\n) => {\n  const { theme } = useThemeStore();\n  const isDark = theme === 'dark';\n  \n  const pressAnimation = useSharedValue(0);\n  const scaleAnimation = useSharedValue(1);\n  const opacityAnimation = useSharedValue(1);\n\n  // Handle press with haptic feedback and animation\n  const handlePress = async (event: any) => {\n    if (disabled || loading) return;\n    \n    await hapticFeedback(hapticType);\n    onPress?.(event);\n  };\n\n  const handlePressIn = (event: any) => {\n    pressAnimation.value = withSpring(1, { damping: 15, stiffness: 300 });\n    scaleAnimation.value = withSpring(0.98, { damping: 15, stiffness: 300 });\n    onPressIn?.(event);\n  };\n\n  const handlePressOut = (event: any) => {\n    pressAnimation.value = withSpring(0, { damping: 15, stiffness: 300 });\n    scaleAnimation.value = withSpring(1, { damping: 15, stiffness: 300 });\n    onPressOut?.(event);\n  };\n\n  // Animated styles\n  const animatedButtonStyle = useAnimatedStyle(() => {\n    const scale = scaleAnimation.value;\n    const opacity = disabled ? 0.6 : interpolate(\n      pressAnimation.value,\n      [0, 1],\n      [1, 0.9]\n    );\n\n    return {\n      transform: [{ scale }],\n      opacity: withTiming(opacity, { duration: 150 }),\n    };\n  });\n\n  // Get button styles based on variant and theme\n  const buttonStyles = StyleSheet.flatten([\n    styles.button,\n    styles[`${variant}_${isDark ? 'dark' : 'light'}`],\n    styles[`size_${size}`],\n    fullWidth && styles.fullWidth,\n    loading && styles.loading,\n    disabled && styles.disabled,\n    style,\n  ]);\n\n  // Get text styles\n  const buttonTextStyles = StyleSheet.flatten([\n    styles.text,\n    styles[`text_${variant}_${isDark ? 'dark' : 'light'}`],\n    styles[`textSize_${size}`],\n    textStyle,\n  ]);\n\n  // Get icon size based on button size\n  const getIconSize = (): number => {\n    if (iconSize) return iconSize;\n    \n    switch (size) {\n      case 'small': return 16;\n      case 'medium': return 18;\n      case 'large': return 20;\n      case 'xlarge': return 24;\n      default: return 18;\n    }\n  };\n\n  // Get icon color based on variant and theme\n  function getIconColor(): string {\n    if (disabled) return isDark ? '#6B7280' : '#9CA3AF';\n    \n    switch (variant) {\n      case 'primary':\n        return '#FFFFFF';\n      case 'secondary':\n        return isDark ? '#F9FAFB' : '#111827';\n      case 'outline':\n        return isDark ? '#60A5FA' : '#3B82F6';\n      case 'ghost':\n        return isDark ? '#60A5FA' : '#3B82F6';\n      case 'destructive':\n        return '#FFFFFF';\n      case 'success':\n        return '#FFFFFF';\n      case 'warning':\n        return '#111827';\n      default:\n        return '#FFFFFF';\n    }\n  }\n\n  // Render button content\n  const renderContent = () => {\n    if (loading) {\n      return (\n        <View style={styles.loadingContent}>\n          <ActivityIndicator \n            size={getIconSize()} \n            color={getIconColor()}\n            accessibilityLabel=\"Loading\"\n          />\n          {size !== 'small' && (\n            <Text style={[buttonTextStyles, { marginLeft: 8 }]}>\n              Loading...\n            </Text>\n          )}\n        </View>\n      );\n    }\n\n    return (\n      <View style={styles.content}>\n        {icon && iconPosition === 'left' && (\n          <Icon \n            name={icon} \n            size={getIconSize()} \n            color={getIconColor()}\n            accessibilityLabel={`${icon} icon`}\n          />\n        )}\n        \n        <Text style={buttonTextStyles} numberOfLines={1}>\n          {title}\n        </Text>\n        \n        {icon && iconPosition === 'right' && (\n          <Icon \n            name={icon} \n            size={getIconSize()} \n            color={getIconColor()}\n            accessibilityLabel={`${icon} icon`}\n          />\n        )}\n        \n        {badge && badge > 0 && (\n          <View style={[styles.badge, { backgroundColor: badgeColor || '#DC2626' }]}>\n            <Text style={styles.badgeText}>\n              {badge > 99 ? '99+' : badge.toString()}\n            </Text>\n          </View>\n        )}\n      </View>\n    );\n  };\n\n  return (\n    <Animated.View style={animatedButtonStyle}>\n      <TouchableOpacity\n        ref={ref}\n        style={buttonStyles}\n        onPress={handlePress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        onLongPress={onLongPress}\n        disabled={disabled || loading}\n        activeOpacity={0.9}\n        testID={testID}\n        accessibilityRole={accessibilityRole}\n        accessibilityLabel={accessibilityLabel || title}\n        accessibilityHint={accessibilityHint}\n        accessibilityState={{\n          disabled: disabled || loading,\n          busy: loading,\n        }}\n        {...props}\n      >\n        {renderContent()}\n      </TouchableOpacity>\n    </Animated.View>\n  );\n});\n\nMobileButton.displayName = 'MobileButton';\n\n// Styles for different variants and sizes\nconst styles = StyleSheet.create({\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    minHeight: 44, // Minimum touch target\n  },\n  \n  fullWidth: {\n    width: '100%',\n  },\n  \n  // Size variants\n  size_small: {\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    minHeight: 36,\n    borderRadius: 8,\n  },\n  size_medium: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    minHeight: 44,\n  },\n  size_large: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    minHeight: 52,\n    borderRadius: 14,\n  },\n  size_xlarge: {\n    paddingHorizontal: 24,\n    paddingVertical: 20,\n    minHeight: 60,\n    borderRadius: 16,\n  },\n  \n  // Variant styles - Light theme\n  primary_light: {\n    backgroundColor: '#3B82F6',\n    ...Platform.select({\n      ios: {\n        shadowColor: '#3B82F6',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 4,\n      },\n    }),\n  },\n  secondary_light: {\n    backgroundColor: '#F3F4F6',\n    borderWidth: 1,\n    borderColor: '#D1D5DB',\n  },\n  outline_light: {\n    backgroundColor: 'transparent',\n    borderWidth: 2,\n    borderColor: '#3B82F6',\n  },\n  ghost_light: {\n    backgroundColor: 'transparent',\n  },\n  destructive_light: {\n    backgroundColor: '#DC2626',\n  },\n  success_light: {\n    backgroundColor: '#10B981',\n  },\n  warning_light: {\n    backgroundColor: '#F59E0B',\n  },\n  \n  // Variant styles - Dark theme\n  primary_dark: {\n    backgroundColor: '#60A5FA',\n  },\n  secondary_dark: {\n    backgroundColor: '#374151',\n    borderWidth: 1,\n    borderColor: '#4B5563',\n  },\n  outline_dark: {\n    backgroundColor: 'transparent',\n    borderWidth: 2,\n    borderColor: '#60A5FA',\n  },\n  ghost_dark: {\n    backgroundColor: 'transparent',\n  },\n  destructive_dark: {\n    backgroundColor: '#EF4444',\n  },\n  success_dark: {\n    backgroundColor: '#34D399',\n  },\n  warning_dark: {\n    backgroundColor: '#FBBF24',\n  },\n  \n  // Text styles\n  text: {\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  \n  // Text sizes\n  textSize_small: {\n    fontSize: 14,\n  },\n  textSize_medium: {\n    fontSize: 16,\n  },\n  textSize_large: {\n    fontSize: 18,\n  },\n  textSize_xlarge: {\n    fontSize: 20,\n  },\n  \n  // Text colors - Light theme\n  text_primary_light: {\n    color: '#FFFFFF',\n  },\n  text_secondary_light: {\n    color: '#111827',\n  },\n  text_outline_light: {\n    color: '#3B82F6',\n  },\n  text_ghost_light: {\n    color: '#3B82F6',\n  },\n  text_destructive_light: {\n    color: '#FFFFFF',\n  },\n  text_success_light: {\n    color: '#FFFFFF',\n  },\n  text_warning_light: {\n    color: '#111827',\n  },\n  \n  // Text colors - Dark theme\n  text_primary_dark: {\n    color: '#FFFFFF',\n  },\n  text_secondary_dark: {\n    color: '#F9FAFB',\n  },\n  text_outline_dark: {\n    color: '#60A5FA',\n  },\n  text_ghost_dark: {\n    color: '#60A5FA',\n  },\n  text_destructive_dark: {\n    color: '#FFFFFF',\n  },\n  text_success_dark: {\n    color: '#FFFFFF',\n  },\n  text_warning_dark: {\n    color: '#111827',\n  },\n  \n  // State styles\n  loading: {\n    opacity: 0.8,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  \n  // Content layout\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n  },\n  loadingContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  \n  // Badge styles\n  badge: {\n    position: 'absolute',\n    top: -6,\n    right: -6,\n    backgroundColor: '#DC2626',\n    borderRadius: 10,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    minWidth: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  badgeText: {\n    color: '#FFFFFF',\n    fontSize: 12,\n    fontWeight: '700',\n    lineHeight: 14,\n  },\n});\n\nexport { MobileButton };\nexport type { MobileButtonProps };\n"}