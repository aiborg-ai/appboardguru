/**
 * Edge-compatible middleware for Next.js
 * Simplified version without Node.js dependencies
 */

import { NextRequest, NextResponse } from 'next/server'
import { createServerClient } from '@supabase/ssr'
import type { Database } from './types/database'

// Simple rate limit cache for Edge runtime
const rateLimitCache = new Map<string, { count: number; resetTime: number }>()

// Get client IP from headers
function getClientIP(request: Request): string {
  const forwarded = request.headers.get('x-forwarded-for')
  const realIP = request.headers.get('x-real-ip')
  
  if (forwarded) {
    return forwarded.split(',')[0]?.trim() || 'unknown'
  }
  
  return realIP || 'unknown'
}

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname
  const clientIP = getClientIP(request)
  
  // Skip middleware for static files and Next.js internals
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/static') ||
    pathname.includes('.') ||
    pathname === '/favicon.ico'
  ) {
    return NextResponse.next()
  }

  // Create response object
  let response = NextResponse.next()

  // Add security headers
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  
  // Simple rate limiting for API routes
  if (pathname.startsWith('/api')) {
    const now = Date.now()
    const key = `${clientIP}:api`
    const limit = rateLimitCache.get(key)
    
    if (limit) {
      if (now < limit.resetTime) {
        if (limit.count >= 100) { // 100 requests per minute
          return NextResponse.json(
            { error: 'Too many requests' },
            { status: 429 }
          )
        }
        limit.count++
      } else {
        // Reset the counter
        rateLimitCache.set(key, { count: 1, resetTime: now + 60000 })
      }
    } else {
      rateLimitCache.set(key, { count: 1, resetTime: now + 60000 })
    }
  }

  // Supabase auth check for protected routes
  if (pathname.startsWith('/dashboard') || pathname.startsWith('/admin')) {
    try {
      const supabase = createServerClient<Database>(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
          cookies: {
            get(name: string) {
              return request.cookies.get(name)?.value
            },
            set(name: string, value: string, options: any) {
              response.cookies.set({
                name,
                value,
                ...options,
                sameSite: 'lax',
                secure: process.env.NODE_ENV === 'production'
              })
            },
            remove(name: string, options: any) {
              response.cookies.delete(name)
            },
          },
        }
      )

      const { data: { user }, error } = await supabase.auth.getUser()

      if (error || !user) {
        // Redirect to login if not authenticated
        const redirectUrl = new URL('/sign-in', request.url)
        redirectUrl.searchParams.set('redirectTo', pathname)
        return NextResponse.redirect(redirectUrl)
      }
    } catch (error) {
      console.error('Middleware auth check failed:', error)
      // Allow request to continue even if auth check fails
    }
  }

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public/).*)',
  ],
}