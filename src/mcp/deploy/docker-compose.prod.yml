version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: boardguru-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - boardguru-demo
    networks:
      - boardguru-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # BoardGuru MCP Demo Server
  boardguru-demo:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: boardguru-mcp-demo
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DEMO_MODE=true
      - DEMO_PORT=3001
      - LOG_LEVEL=info
      - CORS_ORIGIN=https://demo.boardguru.ai
    networks:
      - boardguru-network
    volumes:
      - demo_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: boardguru-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-demo123}
    networks:
      - boardguru-network
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: boardguru-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - boardguru-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: boardguru-grafana
    restart: unless-stopped
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - boardguru-network
    depends_on:
      - prometheus

  # SSL Certificate management
  certbot:
    image: certbot/certbot
    container_name: boardguru-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./ssl-challenges:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@boardguru.ai --agree-tos --no-eff-email -d demo.boardguru.ai
    depends_on:
      - nginx

networks:
  boardguru-network:
    driver: bridge
    name: boardguru-demo-network

volumes:
  nginx_logs:
    name: boardguru-nginx-logs
  demo_logs:
    name: boardguru-demo-logs
  redis_data:
    name: boardguru-redis-data
  prometheus_data:
    name: boardguru-prometheus-data
  grafana_data:
    name: boardguru-grafana-data