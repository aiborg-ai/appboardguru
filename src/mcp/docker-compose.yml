version: '3.8'

services:
  # BoardGuru MCP Server
  boardguru-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: "1.0.0"
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${GIT_COMMIT:-$(git rev-parse --short HEAD)}
    image: boardguru/governance-mcp:latest
    container_name: boardguru-mcp-server
    restart: unless-stopped
    ports:
      - "3000:3000"    # MCP Server
      - "3001:3001"    # Demo Server (if enabled)
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - MCP_HOST=0.0.0.0
      - MCP_PORT=3000
      
      # Authentication & Security
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - API_KEY_PREFIX=bg_mcp_
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      
      # Database (if using external DB)
      - DATABASE_URL=${DATABASE_URL:-}
      - REDIS_URL=${REDIS_URL:-}
      
      # AI Service Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      
      # External Integrations
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY:-}
      
      # Monitoring & Analytics
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ANALYTICS_API_KEY=${ANALYTICS_API_KEY:-}
      - TELEMETRY_ENDPOINT=${TELEMETRY_ENDPOINT:-}
      
      # Enterprise Features
      - ENTERPRISE_LICENSE_KEY=${ENTERPRISE_LICENSE_KEY:-}
      - WHITE_LABEL_CONFIG=${WHITE_LABEL_CONFIG:-}
      
      # Demo Mode
      - DEMO_MODE=${DEMO_MODE:-true}
      - DEMO_PORT=3001
      
    volumes:
      # Persistent data storage
      - boardguru_data:/app/data
      - boardguru_logs:/app/logs
      
      # Configuration override (optional)
      - ${CONFIG_DIR:-./config}:/app/config:ro
      
      # SSL certificates (if using HTTPS)
      - ${SSL_CERT_PATH:-}:/app/ssl/cert.pem:ro
      - ${SSL_KEY_PATH:-}:/app/ssl/key.pem:ro
      
    networks:
      - boardguru-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,version"

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: boardguru-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-boardguru123}
    networks:
      - boardguru-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional: PostgreSQL for enterprise data persistence
  postgres:
    image: postgres:15-alpine
    container_name: boardguru-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=boardguru_mcp
      - POSTGRES_USER=boardguru
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-boardguru123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
    networks:
      - boardguru-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U boardguru -d boardguru_mcp"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: boardguru-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - boardguru-mcp
    networks:
      - boardguru-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: boardguru-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - boardguru-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Optional: Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: boardguru-grafana
    restart: unless-stopped
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - boardguru-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# Networks
networks:
  boardguru-network:
    driver: bridge
    name: boardguru-mcp-network

# Volumes
volumes:
  boardguru_data:
    name: boardguru-mcp-data
    driver: local
  boardguru_logs:
    name: boardguru-mcp-logs
    driver: local
  redis_data:
    name: boardguru-redis-data
    driver: local
  postgres_data:
    name: boardguru-postgres-data
    driver: local
  prometheus_data:
    name: boardguru-prometheus-data
    driver: local
  grafana_data:
    name: boardguru-grafana-data
    driver: local
  nginx_logs:
    name: boardguru-nginx-logs
    driver: local

# Additional configuration for production deployment
x-common-variables: &common-variables
  TZ: UTC
  PUID: 1001
  PGID: 1001

# Labels for service discovery and monitoring
x-common-labels: &common-labels
  com.boardguru.service: "mcp-server"
  com.boardguru.version: "1.0.0"
  com.boardguru.environment: "${ENVIRONMENT:-production}"
  com.boardguru.project: "governance-intelligence"